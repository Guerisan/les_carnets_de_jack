<?php

namespace App\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;

class AttachmentController extends AbstractController
{
    /**
     * @Route("/attachment", name="attachment")
     */
    public function index(Request $request)
    {

        /*******************************************************
         * Only these origins will be allowed to upload images *
         ******************************************************/


        $accepted_origins = array("http://localhost","https://127.0.0.1:8000", "http://192.168.1.1", "http://les-carnets-de-jack.com", "https://les-carnets-de-jack.com");


        reset ($_FILES);
        $temp = current($_FILES);
        if (is_uploaded_file($temp['tmp_name'])){

            if(isset($_SERVER['HTTP_ORIGIN'])){
                // Same-origin requests won't set an origin. If the origin is set, it must be valid.
                if(in_array($_SERVER['HTTP_ORIGIN'], $accepted_origins)){
                    header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);
                }else{
                    header("HTTP/2 403 Origin Denied");
                    return;
                }
            }


            /*
              If your script needs to receive cookies, set images_upload_credentials : true in
              the configuration and enable the following two headers.
            */
            // header('Access-Control-Allow-Credentials: true');
            // header('P3P: CP="There is no P3P policy."');

            // Sanitize input

            if (preg_match("/([^\w\s\d\-_~,;:\[\]\(\).])|([\.]{2,})/", $temp['name'])) {
                header("HTTP/1.1 400 Invalid file name.");
                return;
            }

            // Verify extension
            if (!in_array(strtolower(pathinfo($temp['name'], PATHINFO_EXTENSION)), array("gif", "jpg", "png", "jpeg"))) {
                header("HTTP/1.1 400 Invalid extension.");
                return;
            }

            $newName = $this->generateUniqueFileName();
            //Chemin absolu pour l'upload de l'image
            $filetowrite = $this->getParameter('images_journal_directory'). "content/" . $newName . $temp['name'];
            move_uploaded_file($temp['tmp_name'], $filetowrite);

            // Respond to the successful upload with JSON.
            // Use a location key to specify the path to the saved image resource.
            // { location : '/your/uploaded/image/file'}

            //Chemin relatif pour insertion des images dans les articles (car Symfony n'accèpte pas le chemin absolu, qui est lui nécessaire à l'upload)
            $filetowrite = "/assets/uploads/img/journal/content/" . $newName . $temp['name'];

            //Adaptation de la méthode de tinymce à Symfony
            $response = new Response();
            $response->setContent(json_encode(array('location' => $filetowrite)));
            $response->headers->set('Content-Type', 'application/json');
            $response->prepare($request);
            $response->send();

        } else {
            // Notify editor that the upload failed
            header("HTTP/1.1 500 Server Error");
        }

        return $this->render('pages/bif.html.twig', [
            'controller_name' => 'AttachmentController',
        ]);
    }

    /**
     * @return string
     */
    private
    function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
